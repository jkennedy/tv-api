<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Login</title>
    <script src="https://www.gstatic.com/firebasejs/ui/4.6.1/firebase-ui-auth.js"></script>
    <link type="text/css" rel="stylesheet" href="https://www.gstatic.com/firebasejs/ui/4.6.1/firebase-ui-auth.css" />
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  </head>
  <body>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/7.21.1/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
         https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/7.21.1/firebase-analytics.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.21.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.21.1/firebase-firestore.js"></script>

    <script>
      // Your web app's Firebase configuration
      // For Firebase JS SDK v7.20.0 and later, measurementId is optional
      var firebaseConfig = {
        apiKey: "AIzaSyCy-4bk1CLzz69tUowLRr-00NtS4QTCKAM",
        authDomain: "mychannel-1595185361229.firebaseapp.com",
        databaseURL: "https://mychannel-1595185361229.firebaseio.com",
        projectId: "mychannel-1595185361229",
        storageBucket: "mychannel-1595185361229.appspot.com",
        messagingSenderId: "366836412672",
        appId: "1:366836412672:web:f0a954c96a0f60d08343e5",
        measurementId: "G-EN6TND4ZFG"
      };
      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
      firebase.analytics();
  </script>
  <script>
      /**
       * @param {string} name The cookie name.
       * @return {?string} The corresponding cookie value to lookup.
       */
      function getCookie(name) {
        const v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
        return v ? v[2] : null;
      }

      /**
       * @param {string} url The session login endpoint.
       * @param {string} idToken The ID token to post to backend.
       * @param {?string} csrfToken The CSRF token to send to backend.
       * @return {any} A jQuery promise that resolves on completion.
       */
      const postIdTokenToSessionLogin = function(url, idToken, csrfToken) {
        // POST to session login endpoint.
        return $.ajax({
          type:'POST',
          url: url,
          data: {idToken: idToken, csrfToken: csrfToken},
          contentType: 'application/x-www-form-urlencoded'
        });
      };

  </script>
  <script>
    var uiConfig = {
    callbacks: {
      signInSuccessWithAuthResult: function(authResult, redirectUrl) {
        console.log('successfully logged in');
        console.log(redirectUrl);

        var user = authResult.user;
        // Get the user's ID token as it is needed to exchange for a session cookie.
        user.getIdToken().then(idToken => {
          console.log('got id token');
          console.log(idToken);

          // Session login endpoint is queried and the session cookie is set.
          // CSRF protection should be taken into account.
          // ...
          const csrfToken = getCookie('csrfToken')
          console.log('got csrf token');
          console.log(csrfToken);
          return postIdTokenToSessionLogin('/sessionLogin', idToken, csrfToken);
        }).then(() => {
          window.location.assign('/userSettings');
        });
      },
      uiShown: function() {
        // The widget is rendered.
        // Hide the loader.
        document.getElementById('loader').style.display = 'none';
      }
    },
    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
    signInFlow: 'popup',
    signInSuccessUrl: '/userSettings',
    signInOptions: [
      {
        provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,
        recaptchaParameters: {
          type: 'image', // 'audio'
          size: 'invisible', // 'invisible' or 'compact'
          badge: 'bottomleft' //' bottomright' or 'inline' applies to invisible.
        }
      }
    ],
    // Terms of service url.
    tosUrl: '',
    // Privacy policy url.
    privacyPolicyUrl: ''
    };

    // The start method will wait until the DOM is loaded.
    var ui = new firebaseui.auth.AuthUI(firebase.auth());
    ui.start('#firebaseui-auth-container', uiConfig);

  </script>
  <script>
    async function testdb() {
      try {
        var id = 'K3DYMEHP4CWNH';
        var db = firebase.firestore();
        let doc = db.collection('devices').doc(id);
        let snapshot = await doc.get();
        let entity = snapshot.exists ? snapshot.data() : null;

        console.log('got device:');
        console.log(JSON.stringify(entity));
      }
      catch (err) {
        console.log(err);
      }
    }
  </script>
  <!-- The surrounding HTML is left untouched by FirebaseUI.
     Your app may use that space for branding, controls and other customizations.-->
    <h1>Welcome to My Awesome App</h1>
    <div id="firebaseui-auth-container"></div>
    <div id="loader">Loading...</div>
    <button onclick="testdb()">Test</button>
  </body>
</html>
